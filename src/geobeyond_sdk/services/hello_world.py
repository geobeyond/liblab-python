# This file was generated by liblab | https://liblab.com/

from typing import Any
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import Execute, GetLandingPageF, StatusInfo


class HelloWorldService(BaseService):

    @cast_models
    def describe_hello_world_process(self, f: GetLandingPageF = None) -> Any:
        """An example process that takes a name as input, and echoes it back as output. Intended to demonstrate a simple process with a single literal input.

        :param f: The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON., defaults to None
        :type f: GetLandingPageF, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(GetLandingPageF).is_optional().validate(f)

        serialized_request = (
            Serializer(
                f"{self.base_url}/processes/hello-world", self.get_default_headers()
            )
            .add_query("f", f, explode=False)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return response

    @cast_models
    def execute_hello_world_job(self, request_body: Execute) -> StatusInfo:
        """An example process that takes a name as input, and echoes it back as output. Intended to demonstrate a simple process with a single literal input.

        :param request_body: The request body.
        :type request_body: Execute
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: StatusInfo
        """

        Validator(Execute).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/processes/hello-world/execution",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return StatusInfo._unmap(response)
