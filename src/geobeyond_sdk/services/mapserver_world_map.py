# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import Collection, GetLandingPageF, GetMapF, Lang


class MapserverWorldMapService(BaseService):

    @cast_models
    def describe_mapserver_world_map_collection(
        self, f: GetLandingPageF = None, lang: Lang = None
    ) -> Collection:
        """MapServer demo WMS world map

        :param f: The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON., defaults to None
        :type f: GetLandingPageF, optional
        :param lang: The optional lang parameter instructs the server return a response in a certain language, if supported.  If the language is not among the available values, the Accept-Language header language will be used if it is supported. If the header is missing, the default server language is used. Note that providers may only support a single language (or often no language at all), that can be different from the server language.  Language strings can be written in a complex (e.g. "fr-CA,fr;q=0.9,en-US;q=0.8,en;q=0.7"), simple (e.g. "de") or locale-like (e.g. "de-CH" or "fr_BE") fashion., defaults to None
        :type lang: Lang, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Information about the feature collection with id `collectionId`.

        The response contains a link to the items in the collection
        (path `/collections/{collectionId}/items`, link relation `items`)
        as well as key information about the collection. This information
        includes:

        * A local identifier for the collection that is unique for the dataset;
        * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);
        * An optional title and description for the collection;
        * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;
        * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').
        :rtype: Collection
        """

        Validator(GetLandingPageF).is_optional().validate(f)
        Validator(Lang).is_optional().validate(lang)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/mapserver_world_map",
                self.get_default_headers(),
            )
            .add_query("f", f, explode=False)
            .add_query("lang", lang)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return Collection._unmap(response)

    @cast_models
    def get_map(
        self,
        bbox: List[float] = None,
        datetime_: str = None,
        width: int = None,
        height: int = None,
        transparent: bool = None,
        bbox_crs: int = None,
        f: GetMapF = None,
    ) -> any:
        """MapServer demo WMS world map map

        :param bbox: Only features that have a geometry that intersects the bounding box are selected.The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (height or depth)., defaults to None
        :type bbox: List[float], optional
        :param datetime_: Either a date-time or an interval. Date and time expressions adhere to RFC 3339.
        Intervals may be bounded or half-bounded (double-dots at start or end).

        Examples:

        * A date-time: "2018-02-12T23:20:50Z"
        * A bounded interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
        * Half-bounded intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

        Only features that have a temporal property that intersects the value of
        `datetime` are selected.

        If a feature has multiple temporal properties, it is the decision of the
        server whether only a single temporal property is used to determine
        the extent or all relevant temporal properties., defaults to None
        :type datetime_: str, optional
        :param width: Response image width, defaults to None
        :type width: int, optional
        :param height: Response image height, defaults to None
        :type height: int, optional
        :param transparent: Background transparency of map (default=true)., defaults to None
        :type transparent: bool, optional
        :param bbox_crs: Indicates the EPSG for the given bbox coordinates., defaults to None
        :type bbox_crs: int, optional
        :param f: The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is GeoJSON., defaults to None
        :type f: GetMapF, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Response
        :rtype: any
        """

        Validator(float).is_array().is_optional().validate(bbox)
        Validator(str).is_optional().validate(datetime_)
        Validator(int).is_optional().validate(width)
        Validator(int).is_optional().validate(height)
        Validator(bool).is_optional().validate(transparent)
        Validator(int).is_optional().validate(bbox_crs)
        Validator(GetMapF).is_optional().validate(f)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/mapserver_world_map/map",
                self.get_default_headers(),
            )
            .add_query("bbox", bbox, explode=False)
            .add_query("datetime", datetime_, explode=False)
            .add_query("width", width, explode=False)
            .add_query("height", height, explode=False)
            .add_query("transparent", transparent, explode=False)
            .add_query("bbox-crs", bbox_crs, explode=False)
            .add_query("f", f, explode=False)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return response
