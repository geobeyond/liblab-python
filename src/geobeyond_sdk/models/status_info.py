# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .status_code import StatusCode
from .link_3 import Link3


class StatusInfoType(Enum):
    """An enumeration representing different categories.

    :cvar PROCESS: "process"
    :vartype PROCESS: str
    """

    PROCESS = "process"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, StatusInfoType._member_map_.values()))


@JsonMap({"process_id": "processID", "type_": "type", "job_id": "jobID"})
class StatusInfo(BaseModel):
    """StatusInfo

    :param process_id: process_id, defaults to None
    :type process_id: str, optional
    :param type_: type_
    :type type_: StatusInfoType
    :param job_id: job_id
    :type job_id: str
    :param status: status
    :type status: StatusCode
    :param message: message, defaults to None
    :type message: str, optional
    :param created: created, defaults to None
    :type created: str, optional
    :param started: started, defaults to None
    :type started: str, optional
    :param finished: finished, defaults to None
    :type finished: str, optional
    :param updated: updated, defaults to None
    :type updated: str, optional
    :param progress: progress, defaults to None
    :type progress: int, optional
    :param links: links, defaults to None
    :type links: List[Link3], optional
    """

    def __init__(
        self,
        type_: StatusInfoType,
        job_id: str,
        status: StatusCode,
        process_id: str = None,
        message: str = None,
        created: str = None,
        started: str = None,
        finished: str = None,
        updated: str = None,
        progress: int = None,
        links: List[Link3] = None,
    ):
        """StatusInfo

        :param process_id: process_id, defaults to None
        :type process_id: str, optional
        :param type_: type_
        :type type_: StatusInfoType
        :param job_id: job_id
        :type job_id: str
        :param status: status
        :type status: StatusCode
        :param message: message, defaults to None
        :type message: str, optional
        :param created: created, defaults to None
        :type created: str, optional
        :param started: started, defaults to None
        :type started: str, optional
        :param finished: finished, defaults to None
        :type finished: str, optional
        :param updated: updated, defaults to None
        :type updated: str, optional
        :param progress: progress, defaults to None
        :type progress: int, optional
        :param links: links, defaults to None
        :type links: List[Link3], optional
        """
        if process_id is not None:
            self.process_id = process_id
        self.type_ = self._enum_matching(type_, StatusInfoType.list(), "type_")
        self.job_id = job_id
        self.status = self._enum_matching(status, StatusCode.list(), "status")
        if message is not None:
            self.message = message
        if created is not None:
            self.created = created
        if started is not None:
            self.started = started
        if finished is not None:
            self.finished = finished
        if updated is not None:
            self.updated = updated
        if progress is not None:
            self.progress = self._define_number("progress", progress, ge=0, le=100)
        if links is not None:
            self.links = self._define_list(links, Link3)
