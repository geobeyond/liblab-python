# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import Union
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .utils.one_of_base_model import OneOfBaseModel


class SpatialBboxGuard(OneOfBaseModel):
    class_list = {"any": any, "any": any}


SpatialBbox = Union[any, any]


class Crs(Enum):
    """An enumeration representing different categories.

    :cvar HTTPWWWOPENGISNETDEFCRSOGC1_3CRS84: "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
    :vartype HTTPWWWOPENGISNETDEFCRSOGC1_3CRS84: str
    """

    HTTPWWWOPENGISNETDEFCRSOGC1_3CRS84 = "http://www.opengis.net/def/crs/OGC/1.3/CRS84"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Crs._member_map_.values()))


@JsonMap({})
class Spatial(BaseModel):
    """The spatial extent of the features in the collection.

    :param bbox: One or more bounding boxes that describe the spatial extent of the dataset. In the Core only a single bounding box is supported. Extensions may support additional areas. If multiple areas are provided, the union of the bounding boxes describes the spatial extent., defaults to None
    :type bbox: List[SpatialBbox], optional
    :param crs: Coordinate reference system of the coordinates in the spatial extent (property `bbox`). The default reference system is WGS 84 longitude/latitude. In the Core this is the only supported coordinate reference system. Extensions may support additional coordinate reference systems and add additional enum values., defaults to None
    :type crs: Crs, optional
    """

    def __init__(self, bbox: List[SpatialBbox] = None, crs: Crs = None):
        """The spatial extent of the features in the collection.

        :param bbox: One or more bounding boxes that describe the spatial extent of the dataset. In the Core only a single bounding box is supported. Extensions may support additional areas. If multiple areas are provided, the union of the bounding boxes describes the spatial extent., defaults to None
        :type bbox: List[SpatialBbox], optional
        :param crs: Coordinate reference system of the coordinates in the spatial extent (property `bbox`). The default reference system is WGS 84 longitude/latitude. In the Core this is the only supported coordinate reference system. Extensions may support additional coordinate reference systems and add additional enum values., defaults to None
        :type crs: Crs, optional
        """
        if bbox is not None:
            self.bbox = self._define_list(bbox, SpatialBbox)
        if crs is not None:
            self.crs = self._enum_matching(crs, Crs.list(), "crs")


class Trs(Enum):
    """An enumeration representing different categories.

    :cvar HTTPWWWOPENGISNETDEFUOMISO8601_0GREGORIAN: "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
    :vartype HTTPWWWOPENGISNETDEFUOMISO8601_0GREGORIAN: str
    """

    HTTPWWWOPENGISNETDEFUOMISO8601_0GREGORIAN = (
        "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Trs._member_map_.values()))


@JsonMap({})
class Temporal(BaseModel):
    """The temporal extent of the features in the collection.

    :param interval: One or more time intervals that describe the temporal extent of the dataset. The value `null` is supported and indicates an unbounded interval end. In the Core only a single time interval is supported. Extensions may support multiple intervals. If multiple intervals are provided, the union of the intervals describes the temporal extent., defaults to None
    :type interval: List[List[str]], optional
    :param trs: Coordinate reference system of the coordinates in the temporal extent (property `interval`). The default reference system is the Gregorian calendar. In the Core this is the only supported temporal coordinate reference system. Extensions may support additional temporal coordinate reference systems and add additional enum values., defaults to None
    :type trs: Trs, optional
    """

    def __init__(self, interval: List[List[str]] = None, trs: Trs = None):
        """The temporal extent of the features in the collection.

        :param interval: One or more time intervals that describe the temporal extent of the dataset. The value `null` is supported and indicates an unbounded interval end. In the Core only a single time interval is supported. Extensions may support multiple intervals. If multiple intervals are provided, the union of the intervals describes the temporal extent., defaults to None
        :type interval: List[List[str]], optional
        :param trs: Coordinate reference system of the coordinates in the temporal extent (property `interval`). The default reference system is the Gregorian calendar. In the Core this is the only supported temporal coordinate reference system. Extensions may support additional temporal coordinate reference systems and add additional enum values., defaults to None
        :type trs: Trs, optional
        """
        if interval is not None:
            self.interval = interval
        if trs is not None:
            self.trs = self._enum_matching(trs, Trs.list(), "trs")


@JsonMap({})
class Extent(BaseModel):
    """The extent of the features in the collection. In the Core only spatial and temporal
    extents are specified. Extensions may add additional members to represent other
    extents, for example, thermal or pressure ranges.

    :param spatial: The spatial extent of the features in the collection., defaults to None
    :type spatial: Spatial, optional
    :param temporal: The temporal extent of the features in the collection., defaults to None
    :type temporal: Temporal, optional
    """

    def __init__(self, spatial: Spatial = None, temporal: Temporal = None):
        """The extent of the features in the collection. In the Core only spatial and temporal
        extents are specified. Extensions may add additional members to represent other
        extents, for example, thermal or pressure ranges.

        :param spatial: The spatial extent of the features in the collection., defaults to None
        :type spatial: Spatial, optional
        :param temporal: The temporal extent of the features in the collection., defaults to None
        :type temporal: Temporal, optional
        """
        if spatial is not None:
            self.spatial = self._define_object(spatial, Spatial)
        if temporal is not None:
            self.temporal = self._define_object(temporal, Temporal)
