# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .nd_array import NdArray
from .reference_system_connection import ReferenceSystemConnection
from .domain import Domain


@JsonMap({"type_": "type"})
class Coverages(BaseModel):
    """Coverages

    :param type_: Coverage domain type
    :type type_: any
    :param domain: A Domain, which defines a set of positions and their extent in one or more referencing systems
    :type domain: Domain
    :param ranges: ranges
    :type ranges: any
    """

    def __init__(self, type_: any, domain: Domain, ranges: any):
        """Coverages

        :param type_: Coverage domain type
        :type type_: any
        :param domain: A Domain, which defines a set of positions and their extent in one or more referencing systems
        :type domain: Domain
        :param ranges: ranges
        :type ranges: any
        """
        self.type_ = type_
        self.domain = self._define_object(domain, Domain)
        self.ranges = ranges


@JsonMap({"type_": "type", "domain_type": "domainType"})
class CoverageJson(BaseModel):
    """A geospatial coverage interchange format based on JavaScript Object Notation (JSON)

    :param type_: Coverage domain type
    :type type_: any
    :param domain_type: domain_type, defaults to None
    :type domain_type: str, optional
    :param coverages: coverages, defaults to None
    :type coverages: List[Coverages], optional
    :param parameters: parameters, defaults to None
    :type parameters: any, optional
    :param ranges: ranges, defaults to None
    :type ranges: dict, optional
    :param referencing: referencing, defaults to None
    :type referencing: List[ReferenceSystemConnection], optional
    """

    def __init__(
        self,
        type_: any,
        domain_type: str = None,
        coverages: List[Coverages] = None,
        parameters: any = None,
        ranges: dict = None,
        referencing: List[ReferenceSystemConnection] = None,
    ):
        """A geospatial coverage interchange format based on JavaScript Object Notation (JSON)

        :param type_: Coverage domain type
        :type type_: any
        :param domain_type: domain_type, defaults to None
        :type domain_type: str, optional
        :param coverages: coverages, defaults to None
        :type coverages: List[Coverages], optional
        :param parameters: parameters, defaults to None
        :type parameters: any, optional
        :param ranges: ranges, defaults to None
        :type ranges: dict, optional
        :param referencing: referencing, defaults to None
        :type referencing: List[ReferenceSystemConnection], optional
        """
        self.type_ = type_
        if domain_type is not None:
            self.domain_type = domain_type
        if coverages is not None:
            self.coverages = self._define_list(coverages, Coverages)
        if parameters is not None:
            self.parameters = parameters
        if ranges is not None:
            self.ranges = ranges
        if referencing is not None:
            self.referencing = self._define_list(referencing, ReferenceSystemConnection)
