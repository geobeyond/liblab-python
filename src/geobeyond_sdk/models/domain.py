# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .reference_system_connection import ReferenceSystemConnection


@JsonMap({"type_": "type", "domain_type": "domainType"})
class Domain(BaseModel):
    """A Domain, which defines a set of positions and their extent in one or more referencing systems

    :param type_: type_
    :type type_: any
    :param domain_type: domain_type, defaults to None
    :type domain_type: str, optional
    :param axes: axes
    :type axes: dict
    :param referencing: referencing, defaults to None
    :type referencing: List[ReferenceSystemConnection], optional
    """

    def __init__(
        self,
        type_: any,
        axes: dict,
        domain_type: str = None,
        referencing: List[ReferenceSystemConnection] = None,
    ):
        """A Domain, which defines a set of positions and their extent in one or more referencing systems

        :param type_: type_
        :type type_: any
        :param domain_type: domain_type, defaults to None
        :type domain_type: str, optional
        :param axes: axes
        :type axes: dict
        :param referencing: referencing, defaults to None
        :type referencing: List[ReferenceSystemConnection], optional
        """
        self.type_ = type_
        if domain_type is not None:
            self.domain_type = domain_type
        self.axes = axes
        if referencing is not None:
            self.referencing = self._define_list(referencing, ReferenceSystemConnection)
