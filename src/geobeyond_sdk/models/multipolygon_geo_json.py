# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel


class MultipolygonGeoJsonType(Enum):
    """An enumeration representing different categories.

    :cvar MULTIPOLYGON: "MultiPolygon"
    :vartype MULTIPOLYGON: str
    """

    MULTIPOLYGON = "MultiPolygon"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, MultipolygonGeoJsonType._member_map_.values())
        )


@JsonMap({"type_": "type"})
class MultipolygonGeoJson(BaseModel):
    """MultipolygonGeoJson

    :param type_: type_
    :type type_: MultipolygonGeoJsonType
    :param coordinates: coordinates
    :type coordinates: List[List[List[List[float]]]]
    """

    def __init__(
        self, type_: MultipolygonGeoJsonType, coordinates: List[List[List[List[float]]]]
    ):
        """MultipolygonGeoJson

        :param type_: type_
        :type type_: MultipolygonGeoJsonType
        :param coordinates: coordinates
        :type coordinates: List[List[List[List[float]]]]
        """
        self.type_ = self._enum_matching(type_, MultipolygonGeoJsonType.list(), "type_")
        self.coordinates = coordinates
