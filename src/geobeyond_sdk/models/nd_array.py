# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel


@JsonMap({"type_": "type", "data_type": "dataType", "axis_names": "axisNames"})
class NdArray(BaseModel):
    """Object representing a multidimensional (>= 0D) array with named axes, encoded as a flat one-dimensional array in row-major order

    :param type_: type_
    :type type_: any
    :param data_type: data_type
    :type data_type: any
    :param shape: shape, defaults to None
    :type shape: List[float], optional
    :param axis_names: axis_names, defaults to None
    :type axis_names: List[str], optional
    :param values: values
    :type values: List[float]
    """

    def __init__(
        self,
        type_: any,
        data_type: any,
        values: List[float],
        shape: List[float] = None,
        axis_names: List[str] = None,
    ):
        """Object representing a multidimensional (>= 0D) array with named axes, encoded as a flat one-dimensional array in row-major order

        :param type_: type_
        :type type_: any
        :param data_type: data_type
        :type data_type: any
        :param shape: shape, defaults to None
        :type shape: List[float], optional
        :param axis_names: axis_names, defaults to None
        :type axis_names: List[str], optional
        :param values: values
        :type values: List[float]
        """
        self.type_ = type_
        self.data_type = data_type
        if shape is not None:
            self.shape = shape
        if axis_names is not None:
            self.axis_names = axis_names
        self.values = values
