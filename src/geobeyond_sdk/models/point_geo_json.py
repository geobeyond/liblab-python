# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel


class PointGeoJsonType(Enum):
    """An enumeration representing different categories.

    :cvar POINT: "Point"
    :vartype POINT: str
    """

    POINT = "Point"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, PointGeoJsonType._member_map_.values()))


@JsonMap({"type_": "type"})
class PointGeoJson(BaseModel):
    """PointGeoJson

    :param type_: type_
    :type type_: PointGeoJsonType
    :param coordinates: coordinates
    :type coordinates: List[float]
    """

    def __init__(self, type_: PointGeoJsonType, coordinates: List[float]):
        """PointGeoJson

        :param type_: type_
        :type type_: PointGeoJsonType
        :param coordinates: coordinates
        :type coordinates: List[float]
        """
        self.type_ = self._enum_matching(type_, PointGeoJsonType.list(), "type_")
        self.coordinates = coordinates
