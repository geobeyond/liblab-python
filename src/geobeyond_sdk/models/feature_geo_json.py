# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import Union
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .utils.one_of_base_model import OneOfBaseModel
from .geometry_geo_json import GeometryGeoJson, GeometryGeoJsonGuard
from .point_geo_json import PointGeoJson
from .multipoint_geo_json import MultipointGeoJson
from .linestring_geo_json import LinestringGeoJson
from .multilinestring_geo_json import MultilinestringGeoJson
from .polygon_geo_json import PolygonGeoJson
from .multipolygon_geo_json import MultipolygonGeoJson
from .geometrycollection_geo_json import GeometrycollectionGeoJson
from .link import Link


class FeatureGeoJsonType(Enum):
    """An enumeration representing different categories.

    :cvar FEATURE: "Feature"
    :vartype FEATURE: str
    """

    FEATURE = "Feature"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, FeatureGeoJsonType._member_map_.values()))


class IdGuard(OneOfBaseModel):
    class_list = {"str": str, "int": int}


Id = Union[str, int]


@JsonMap({"type_": "type", "id_": "id"})
class FeatureGeoJson(BaseModel):
    """FeatureGeoJson

    :param type_: type_
    :type type_: FeatureGeoJsonType
    :param geometry: geometry
    :type geometry: GeometryGeoJson
    :param properties: properties
    :type properties: dict
    :param id_: id_, defaults to None
    :type id_: Id, optional
    :param links: links, defaults to None
    :type links: List[Link], optional
    """

    def __init__(
        self,
        type_: FeatureGeoJsonType,
        geometry: GeometryGeoJson,
        properties: dict,
        id_: Id = None,
        links: List[Link] = None,
    ):
        """FeatureGeoJson

        :param type_: type_
        :type type_: FeatureGeoJsonType
        :param geometry: geometry
        :type geometry: GeometryGeoJson
        :param properties: properties
        :type properties: dict
        :param id_: id_, defaults to None
        :type id_: Id, optional
        :param links: links, defaults to None
        :type links: List[Link], optional
        """
        self.type_ = self._enum_matching(type_, FeatureGeoJsonType.list(), "type_")
        self.geometry = GeometryGeoJsonGuard.return_one_of(geometry)
        self.properties = properties
        if id_ is not None:
            self.id_ = IdGuard.return_one_of(id_)
        if links is not None:
            self.links = self._define_list(links, Link)
