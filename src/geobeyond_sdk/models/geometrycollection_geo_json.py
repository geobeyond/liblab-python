# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .geometry_geo_json import GeometryGeoJson, GeometryGeoJsonGuard
from .point_geo_json import PointGeoJson
from .multipoint_geo_json import MultipointGeoJson
from .linestring_geo_json import LinestringGeoJson
from .multilinestring_geo_json import MultilinestringGeoJson
from .polygon_geo_json import PolygonGeoJson
from .multipolygon_geo_json import MultipolygonGeoJson
from .geometrycollection_geo_json import GeometrycollectionGeoJson


class GeometrycollectionGeoJsonType(Enum):
    """An enumeration representing different categories.

    :cvar GEOMETRYCOLLECTION: "GeometryCollection"
    :vartype GEOMETRYCOLLECTION: str
    """

    GEOMETRYCOLLECTION = "GeometryCollection"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GeometrycollectionGeoJsonType._member_map_.values())
        )


@JsonMap({"type_": "type"})
class GeometrycollectionGeoJson(BaseModel):
    """GeometrycollectionGeoJson

    :param type_: type_
    :type type_: GeometrycollectionGeoJsonType
    :param geometries: geometries
    :type geometries: List[GeometryGeoJson]
    """

    def __init__(
        self, type_: GeometrycollectionGeoJsonType, geometries: List[GeometryGeoJson]
    ):
        """GeometrycollectionGeoJson

        :param type_: type_
        :type type_: GeometrycollectionGeoJsonType
        :param geometries: geometries
        :type geometries: List[GeometryGeoJson]
        """
        self.type_ = self._enum_matching(
            type_, GeometrycollectionGeoJsonType.list(), "type_"
        )
        self.geometries = self._define_list(geometries, GeometryGeoJson)
